Calculator

There are several different ways to implement a simple Calculator program.
One popular way is to use a stack based approach, where numbers are pushed onto
a stack, mathematical operations pop numbers from the stack, and the results
get pushed back in.

However, for this assignment, I took the most straightforward and natural
approach by choosing a divide and conquer approach in recursion. All of the
operations (add/sub/mult/div/let) took operands, each as some sort of a sub
expression. In my solution I removed all whitespaces in the input expression
between brackets and commas to make parsing easier. Whitespaces between other
characters were kept, and those made for invalid expressions. Then, I parsed
the expression from the beginning. After going through the first operation, I
extracted the two operands from it (three in the case of let) and recursively
broke down each subexpression and further subexpressions until a numerical
value or variable was obtained. This was the end of the recursion, and
operations were evaluated as the recursive calls were returned.

For storing variables and their values, a HashMap was probably the. Once the
second expression in the let operation was evaluated, I assigned the value t
the variable and added the entry to the HashMap. As a variable used in one let
operation can be reused in others, it was necessary to remove the entry for
that particular variable from the HashMap once the end of the let operation had
been reached.

For logging, I used the Java utils logging package. This provides different
logging levels include FINE, INFO, and SEVERE, which correspond to the DEBUG,
INFO, and ERROR levels respectively. During my testing, I found out that this
only ERROR logs were displayed on the console when there was an invalid input
expression. After looking for some pointers online, I discovered that in order
to have the other levels displayed as well, a ConsoleHandler object with the
appropriate logging level set needed to be created and added to the Logger
object.

After completing my implementation, I tested my code thoroughly on numerous
valid and invalid input expressions to ensure all possible code paths were
exhausted and everything went as expected. With the coding and testing parts
put together, it took about seven hours to complete.



Maven

As I did not have previous experience with Maven, I needed to read some
tutorials to learn how it worked. Fortunately, there was an easy and convenient
way to use Maven from the M2Eclipse plugin. As I initially, created the project
as a Java project, I needed to convert it to a Maven project before being able
to specify the groupId, artifactId, name, and description to create the pom.xml
file. Then, I ran mvn compile from the directory where pom.xml is located to
build the project. It took me about one hour to read about Maven and create
the configuration.



Git

As I did not have previous experience with Git, I needed to consult some
tutorials to learn about it. I started off by creating a free, public account
on GitHub and creating a repository. Then, I installed a Git client on my
personal machine to be able to run Git commands there. From the client, I
converted my local project directory to a Git repository and then added,
committed, and pushed my work to the repository. It took about one hour from
opening a Git account to completing an initial commit to the repository.

